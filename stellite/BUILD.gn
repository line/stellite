
# This is the root build file for GN. GN will start processing by loading this
# file, and recursively load all dependencies until all dependencies are either
# resolved or known not to exist (which will cause the build to fail). So if
# you add a new build file, there must be some path of dependencies from this
# file to your new one or GN won't know about it.

import("//build/buildflag_header.gni")
import("//build/config/chromecast_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/crypto.gni")
import("//build/config/features.gni")
import("//build/config/ui.gni")
import("//testing/test.gni")

component("stellite") {
  sources = [
    "fetcher/http_fetcher.cc",
    "fetcher/http_fetcher.h",
    "fetcher/http_fetcher_core.cc",
    "fetcher/http_fetcher_core.h",
    "fetcher/http_fetcher_impl.cc",
    "fetcher/http_fetcher_impl.h",
    "fetcher/http_fetcher_task.cc",
    "fetcher/http_fetcher_task.h",
    "fetcher/http_request.cc",
    "fetcher/http_request_context_getter.cc",
    "fetcher/http_request_context_getter.h",
    "fetcher/http_response.cc",
    "fetcher/http_rewrite.cc",
    "fetcher/http_rewrite.h",
    "fetcher/http_ssl_config_service.cc",
    "fetcher/http_ssl_config_service.h",
    "fetcher/spdy_utils.cc",
    "fetcher/spdy_utils.h",
    "include/http_request.h",
    "include/http_response.h",
  ]

  deps = [
    "//base",
    "//build/config/sanitizers:deps",
    "//components/url_matcher",
    "//net",
    "//net:simple_quic_tools",
    "//third_party/boringssl",
    "//third_party/protobuf:protobuf_lite",
    "//third_party/re2",
  ]

  defines = [
    "STELLITE_IMPLEMENTATION",
  ]

  if (!is_win) {
    defines += [ "COMPONENT_BUILD" ]
  }
}

component("stellite_quic_server_base") {
  sources = [
    "crypto/quic_ephemeral_key_source.cc",
    "crypto/quic_ephemeral_key_source.h",
    "process/daemon.cc",
    "process/daemon.h",
    "server/parse_util.cc",
    "server/parse_util.h",
    "server/proxy_stream.cc",
    "server/proxy_stream.h",
    "server/quic_proxy_dispatcher.cc",
    "server/quic_proxy_dispatcher.h",
    "server/quic_proxy_server.cc",
    "server/quic_proxy_server.h",
    "server/quic_proxy_worker.cc",
    "server/quic_proxy_worker.h",
    "server/server_config.cc",
    "server/server_config.h",
    "server/server_packet_writer.cc",
    "server/server_packet_writer.h",
    "server/server_per_connection_packet_writer.cc",
    "server/server_per_connection_packet_writer.h",
    "server/server_session.cc",
    "server/server_session.h",
    "server/server_session_helper.cc",
    "server/server_session_helper.h",
    "socket/quic_udp_server_socket.cc",
    "socket/quic_udp_server_socket.h",
    "socket/quic_udp_socket.h",
    "socket/quic_udp_socket_posix.cc",
    "socket/quic_udp_socket_posix.h",
    "stats/server_stats.cc",
    "stats/server_stats.h",
    "stats/server_stats_macro.h",
    "stats/server_stats_recorder.cc",
    "stats/server_stats_recorder.h",
  ]

  deps = [
    "//base",
    "//net",
    ":stellite",
  ]
}

executable("stellite_quic_server_bin") {
  sources = [
    "bin/stellite_quic_server_bin.cc",
  ]

  deps = [
    "//base",
    "//net",
    "//third_party/protobuf:protobuf_lite",
    ":stellite_quic_server_base",
  ]
}

component("stellite_http_client") {
  sources = [
    "client/http_client_context.cc",
    "client/http_client_impl.cc",
    "client/http_client_impl.h",
    "client/http_session.cc",
    "client/logging.cc",
    "include/http_client.h",
    "include/http_client_context.h",
    "include/http_session.h",
    "include/logging.h",
    "include/stellite_export.h",
  ]

  defines = [
    "STELLITE_IMPLEMENTATION",
  ]

  if (!is_win) {
    defines += [ "COMPONENT_BUILD" ]
  }

  deps = [
    "//base",
    "//base/third_party/dynamic_annotations",
    "//build/config/sanitizers:deps",
    "//components/url_matcher",
    "//net",
    "//url",
    "//third_party/protobuf:protobuf_lite",
    "//third_party/boringssl",
    "//third_party/re2",
    ":stellite",
  ]

  if (is_android) {
    deps += [
      "//base:base_java",
      "//net/android:net_java",
    ]

    sources += [
      "client/jni_onload.cc",
    ]
  }
}

executable("stellite_http_client_bin") {
  sources = [
    "bin/stellite_http_client_bin.cc",
  ]

  deps = [
    "//base",
    "//build/config/sanitizers:deps",
    "//build/win:default_exe_manifest",
    "//net",
    "//third_party/boringssl",
    "//third_party/protobuf:protobuf_lite",
    "//url",
    ":stellite_http_client",
  ]
}

executable("stellite_http_session_bin") {
  sources = [
    "bin/stellite_http_session_bin.cc",
  ]

  deps = [
    "//base",
    "//build/config/sanitizers:deps",
    "//build/win:default_exe_manifest",
    "//net",
    "//third_party/boringssl",
    "//third_party/protobuf:protobuf_lite",
    "//url",
    ":stellite_http_client",
  ]
}

executable("simple_chunked_upload_client_bin") {
  sources = [
    "bin/simple_chunked_upload_bin.cc",
  ]

  deps = [
    "//base",
    "//build/config/sanitizers:deps",
    "//build/win:default_exe_manifest",
    "//net",
    "//third_party/boringssl",
    "//third_party/protobuf:protobuf_lite",
    "//url",
    ":stellite_http_client",
  ]
}

component("stellite_client_binder") {
  sources = [
    "stub/client_binder.h",
    "stub/client_binder.cc",
  ]

  defines = [
    "STELLITE_IMPLEMENTATION",
  ]

  if (!is_win) {
    defines += [ "COMPONENT_BUILD" ]
  }

  deps = [
    "//base",
    "//build/config/sanitizers:deps",
    "//build/win:default_exe_manifest",
    "//net",
    "//third_party/boringssl",
    "//third_party/protobuf:protobuf_lite",
    "//url",
    ":stellite_http_client",
  ]
}

if (!is_ios && !is_android) {
  test("stellite_unittests") {
    sources = [
      "bin/run_all_unittests.cc",
      "fetcher/http_fetcher_quic_unittest.cc",
      "server/quic_proxy_server_unittest.cc",
      "test/stellite_test_suite.cc",
      "test/stellite_test_suite.h",
    ]

    deps = [
      "//base",
      "//gin",
      "//net",
      "//net:test_support",
      "//testing/gtest",
      ":stellite_http_client",
      ":stellite_quic_server_base",
    ]
  }
}
